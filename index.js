require('dotenv').config()
const { Telegraf, Markup } = require("telegraf");
const bot = new Telegraf(process.env.TOKEN)


bot.hears("/start", ctx => {
    const chatId = ctx.chat.id
    const first_name = ctx.message.from.first_name
    const userid = ctx.message.from.id
    const username = ctx.message.from.username
    const user = `[${ctx.message.from.first_name}](tg://user?id=${ctx.message.from.id})`
    ctx.deleteMessage();


    ctx.telegram.sendPhoto(
        chatId,
        { source: './photos/photoStart.png' },
        {
            caption: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ü•≥ ${user} \n–í –±–æ—Ç–µ –Ω–µ—Ç –≥–ª—É–ø—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —Å–∫—É—á–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π üòà\n–ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã ‚ô•Ô∏è `, reply_markup: {
                inline_keyboard: [
                    [{ text: "üôà –ü—Ä–∞–≤–¥–∞", callback_data: "Truht" }, { text: "ü§Ø –î–µ–π—Å—Ç–≤–∏—è", callback_data: "Dare" }],
                    [{ text: "üñá –°–ª—É—á–∞–π–Ω–æ", callback_data: "Random" }],
                    [{ text: "üòù –î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", url: "https://t.me/Pravda_deystviya_bot?startgroup=new" }],
                ]
            }, parse_mode: 'MarkdownV2'
        }
    )

    console.log(ctx.chat);
})

bot.action("Truht", (ctx) => {
    ctx.deleteMessage();
    ctx.telegram.sendPhoto(
        ctx.chat.id,
        { source: './photos/photoStart.png' },
        {
            caption: '–ö–∞–∫ –≤—ã –Ω–∞–∑–≤–∞–ª–∏ –≤–∞—à–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–±—ë–Ω–∫–∞ ?!\n(–ú–∞–ª—å—á–∏–∫,–¥–µ–≤—É—à–∫–∞)', reply_markup: {
                inline_keyboard: [
                    [{ text: "ü§Ø –î–µ–π—Å—Ç–≤–∏—è", callback_data: "Dare" }],
                    [{ text: "üîú –°–ª–µ–¥—É—é—â–∏–π ", callback_data: "nextT" }]
                ]
            }
        }
    )

});
bot.action("Dare", (ctx) => {
    ctx.deleteMessage();

    ctx.telegram.sendPhoto(
        ctx.chat.id,
        { source: './photos/photoStart.png' },
        {
            caption: '–°–∫–∞–∂–∏ –õ–ü/–õ–î —á—Ç–æ —Ç—ã –≤—ã–∏–≥—Ä–∞–ª 100.000—Å—É–º.–ü–æ—Ç–æ–º —Å–∫–∞–∂–∏ —ç—Ç–æ –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–µ —Ç—ã.', reply_markup: {
                inline_keyboard: [
                    [{ text: "üôà –ü—Ä–∞–≤–¥–∞", callback_data: "Truht" }],
                    [{ text: "üîú –°–ª–µ–¥—É—é—â–∏–π", callback_data: "nextD" }]
                ]
            }
        }
    )
});
bot.action("Random", (ctx) => {
    ctx.deleteMessage();

    const num = Math.floor(Math.random() * 2)
    if (num === 0) {
        ctx.telegram.sendPhoto(
            ctx.chat.id,
            { source: './photos/photoStart.png' },
            {
                caption: '–ö–∞–∫ –≤—ã –Ω–∞–∑–≤–∞–ª–∏ –≤–∞—à–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–±—ë–Ω–∫–∞ ?!\n(–ú–∞–ª—å—á–∏–∫,–¥–µ–≤—É—à–∫–∞)', reply_markup: {
                    inline_keyboard: [
                        [{ text: "ü§Ø –î–µ–π—Å—Ç–≤–∏—è", callback_data: "Dare" }],
                        [{ text: "üîú –°–ª–µ–¥—É—é—â–∏–π ", callback_data: "nextT" }]
                    ]
                }
            }
        )

        // ctx.reply('Truht', Markup.inlineKeyboard([Markup.button.callback("Truht")]))
    } else {
        ctx.telegram.sendPhoto(
            ctx.chat.id,
            { source: './photos/photoStart.png' },
            {
                caption: '–°–∫–∞–∂–∏ –õ–ü/–õ–î —á—Ç–æ —Ç—ã –≤—ã–∏–≥—Ä–∞–ª 100.000—Å—É–º.–ü–æ—Ç–æ–º —Å–∫–∞–∂–∏ —ç—Ç–æ –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–µ —Ç—ã.', reply_markup: {
                    inline_keyboard: [
                        [{ text: "üôà –ü—Ä–∞–≤–¥–∞", callback_data: "Truht" }],
                        [{ text: "üîú –°–ª–µ–¥—É—é—â–∏–π", callback_data: "nextD" }]
                    ]
                }
            }
        )

        // ctx.reply('Dare', Markup.inlineKeyboard([Markup.button.callback("Dare")]))
    }
});




bot.launch()